# import math
# def sieve(size):
#     sieve= [True] * size
#     sieve[0] = False
#     sieve[1] = False
#     for i in range(2, int(math.sqrt(size)) + 1):
#         k= i * 2
#         while k < size:
#            sieve[k] = False
#            k += i
#     return sum(1 for x in sieve if x)
# print(sieve(10000000000))

import base64 
import PIL 
res = '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' 
encrypted = base64.standard_b64decode(res) 
print(len(encrypted)) 
img = PIL.Image.frombytes('L', (64, 64), encrypted) 
img.show()